/**
最外面是hmap结构体，用buckets存放一些名字叫bmap的桶（数量不定，是2的指数倍）
bmap是一种有8个格子的桶（一定只有8个格子），每个格子存放一对key-value
bmap有一个overflow，用于连接下一个bmap（溢出桶）
hmap还有oldbuckets，用于存放老数据（用于扩容时）
*/
// Like mapaccess, but allocates a slot for the key if it is not present in the map.
func mapassign(t *maptype, h *hmap, key unsafe.Pointer) unsafe.Pointer {
	//在查找key之前，会做异常检测，校验map是否未初始化
	if h == nil {
		panic(plainError("assignment to entry in nil map"))
	}
	//开启竞态检测
	if raceenabled {
		callerpc := getcallerpc()
		pc := funcPC(mapassign)
		racewritepc(unsafe.Pointer(h), callerpc, pc)
		raceReadObjectPC(t.key, key, callerpc, pc)
	}
	if msanenabled {
		msanread(key, t.key.size)
	}
	//检查正在并发写操作，
	//如果存在，则抛出异常：（这就是为什么map 并发写回panic的原因）
	if h.flags&hashWriting != 0 {
		throw("concurrent map writes")
	}
	//通过key和哈希种子，算出对应哈希值
	hash := t.hasher(key, uintptr(h.hash0))

	// Set hashWriting after calling t.hasher, since t.hasher may panic,
	// in which case we have not actually done a write.
	// 将flags的值与hashWriting做按位或运算
	// 因为在当前goroutine可能还未完成key的写入，再次调用t.hasher会发生panic。
	h.flags ^= hashWriting

	if h.buckets == nil {
		h.buckets = newobject(t.bucket) // newarray(t.bucket, 1)
	}

again:
	// bucketMask返回值是2的n次方减1
	// 因此，通过hash值与bucketMask返回值做按位与操作，返回的在buckets数组中的第几号桶
	bucket := hash & bucketMask(h.B)
	// 如果map正在搬迁（即h.oldbuckets != nil）中,则先进行搬迁工作。
	if h.growing() {
		growWork(t, h, bucket)
	}
	// 计算出上面求出的第几号bucket的内存位置
	// 得到桶的位置
	b := (*bmap)(unsafe.Pointer(uintptr(h.buckets) + bucket*uintptr(t.bucketsize)))
	top := tophash(hash)

	var inserti *uint8
	var insertk unsafe.Pointer
	var elem unsafe.Pointer
bucketloop:
	for {
		//遍历桶里的8个cell
		for i := uintptr(0); i < bucketCnt; i++ {
			if b.tophash[i] != top {
				// 如果cell位为空，那么就可以在对应位置进行插入
				if isEmpty(b.tophash[i]) && inserti == nil {
					inserti = &b.tophash[i]
					insertk = add(unsafe.Pointer(b), dataOffset+i*uintptr(t.keysize))
					elem = add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.elemsize))
				}
				if b.tophash[i] == emptyRest {
					break bucketloop
				}
				continue
			}
			// 第二种情况是cell位的tophash值和当前的tophash值相等
			k := add(unsafe.Pointer(b), dataOffset+i*uintptr(t.keysize))
			if t.indirectkey() {
				k = *((*unsafe.Pointer)(k))
			}
			// 如果已经有该key了，就更新它
			if !t.key.equal(key, k) {
				continue
			}
			// already have a mapping for key. Update it.
			if t.needkeyupdate() {
				typedmemmove(t.key, k, key)
			}
			elem = add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.elemsize))
			goto done
		}
		// 如果桶中的8个cell遍历完，还未找到对应的空cell或覆盖cell，那么就进入它的溢出桶中去遍历
		ovf := b.overflow(t)
		//如果连溢出桶中都没有找到合适的cell，跳出循环。
		if ovf == nil {
			break
		}
		b = ovf
	}
